databaseChangeLog:
  # Story 1.3: Database Schema Foundation & Liquibase Setup

  # Changeset 001: Create user_role ENUM type
  - changeSet:
      id: 001-create-user-role-enum
      author: developer
      comment: "Create PostgreSQL ENUM type for user roles (HR_ADMIN, LINE_MANAGER, TECH_SUPPORT, ADMINISTRATOR)"
      changes:
        - sql:
            sql: |
              CREATE TYPE user_role AS ENUM (
                'HR_ADMIN',
                'LINE_MANAGER',
                'TECH_SUPPORT',
                'ADMINISTRATOR'
              );
      rollback:
        - sql:
            sql: DROP TYPE IF EXISTS user_role CASCADE;

  # Changeset 002: Create users table with audit columns and indexes
  - changeSet:
      id: 002-create-users-table
      author: developer
      comment: "Create users table with UUID primary key, role-based access control, soft delete support, and audit columns"
      changes:
        - sql:
            sql: |
              CREATE TABLE users (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                username VARCHAR(50) NOT NULL UNIQUE,
                email VARCHAR(100) NOT NULL UNIQUE,
                password_hash VARCHAR(255) NOT NULL,
                role user_role NOT NULL,
                is_active BOOLEAN NOT NULL DEFAULT true,
                created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                created_by UUID,
                updated_at TIMESTAMP,
                updated_by UUID
              );

              CREATE INDEX idx_users_email ON users(email);
              CREATE INDEX idx_users_username ON users(username);
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_users_username;
              DROP INDEX IF EXISTS idx_users_email;
              DROP TABLE IF EXISTS users;

  # Story 1.4: Authentication & Session Management

  # Changeset 003: Seed admin user for testing
  - changeSet:
      id: 003-seed-admin-user
      author: developer
      comment: "Insert default admin user with BCrypt-hashed password for testing (username: admin, password: password)"
      changes:
        - sql:
            sql: |
              INSERT INTO users (id, username, email, password_hash, role, is_active, created_at)
              VALUES (
                gen_random_uuid(),
                'admin',
                'admin@magnab.com',
                '$2a$10$dXJ3SW6G7P50lGmMkkmwe.20cQQubK3.HZWzG3YB1tlRy.fqvM/BG',
                'ADMINISTRATOR',
                true,
                CURRENT_TIMESTAMP
              );
      rollback:
        - sql:
            sql: DELETE FROM users WHERE username = 'admin';

  # Changeset 004: Create audit_events table
  - changeSet:
      id: 004-create-audit-events-table
      author: developer
      comment: "Create audit_events table for comprehensive audit logging"
      changes:
        - sql:
            sql: |
              CREATE TABLE audit_events (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                user_id UUID,
                action_type VARCHAR(100) NOT NULL,
                entity_type VARCHAR(50),
                entity_id UUID,
                description VARCHAR(500),
                metadata TEXT,
                timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
              );

              CREATE INDEX idx_audit_user_id ON audit_events(user_id);
              CREATE INDEX idx_audit_action_type ON audit_events(action_type);
              CREATE INDEX idx_audit_entity_type ON audit_events(entity_type);
              CREATE INDEX idx_audit_entity_id ON audit_events(entity_id);
              CREATE INDEX idx_audit_timestamp ON audit_events(timestamp);
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_audit_timestamp;
              DROP INDEX IF EXISTS idx_audit_entity_id;
              DROP INDEX IF EXISTS idx_audit_entity_type;
              DROP INDEX IF EXISTS idx_audit_action_type;
              DROP INDEX IF EXISTS idx_audit_user_id;
              DROP TABLE IF EXISTS audit_events;

  # Story 2.1: Workflow Template Data Model

  # Changeset 005: Create workflow_type and workflow_status ENUM types
  - changeSet:
      id: 005-create-workflow-enums
      author: developer
      comment: "Create PostgreSQL ENUM types for workflow_type (ONBOARDING, OFFBOARDING) and workflow_status (INITIATED, IN_PROGRESS, BLOCKED, COMPLETED)"
      changes:
        - sql:
            sql: |
              CREATE TYPE workflow_type AS ENUM (
                'ONBOARDING',
                'OFFBOARDING'
              );

              CREATE TYPE workflow_status AS ENUM (
                'INITIATED',
                'IN_PROGRESS',
                'BLOCKED',
                'COMPLETED'
              );
      rollback:
        - sql:
            sql: |
              DROP TYPE IF EXISTS workflow_status CASCADE;
              DROP TYPE IF EXISTS workflow_type CASCADE;

  # Changeset 006: Create workflow_templates table
  - changeSet:
      id: 006-create-workflow-templates-table
      author: developer
      comment: "Create workflow_templates table with workflow_type enum, audit columns, and foreign key to users"
      changes:
        - sql:
            sql: |
              CREATE TABLE workflow_templates (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                template_name VARCHAR(100) NOT NULL UNIQUE,
                workflow_type workflow_type NOT NULL,
                description TEXT,
                default_status workflow_status NOT NULL DEFAULT 'INITIATED',
                created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                created_by UUID,
                updated_at TIMESTAMP,
                updated_by UUID,
                CONSTRAINT fk_workflow_templates_created_by FOREIGN KEY (created_by) REFERENCES users(id),
                CONSTRAINT fk_workflow_templates_updated_by FOREIGN KEY (updated_by) REFERENCES users(id)
              );

              CREATE INDEX idx_workflow_templates_name ON workflow_templates(template_name);
              CREATE INDEX idx_workflow_templates_type ON workflow_templates(workflow_type);
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_workflow_templates_type;
              DROP INDEX IF EXISTS idx_workflow_templates_name;
              DROP TABLE IF EXISTS workflow_templates;

  # Changeset 007: Create template_tasks table
  - changeSet:
      id: 007-create-template-tasks-table
      author: developer
      comment: "Create template_tasks table with self-referential foreign key for task dependencies and cascade delete on template deletion"
      changes:
        - sql:
            sql: |
              CREATE TABLE template_tasks (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                template_id UUID NOT NULL,
                task_name VARCHAR(100) NOT NULL,
                description TEXT,
                sequence_order INTEGER NOT NULL,
                depends_on_task_id UUID,
                created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                created_by UUID,
                updated_at TIMESTAMP,
                updated_by UUID,
                CONSTRAINT fk_template_tasks_template_id FOREIGN KEY (template_id) REFERENCES workflow_templates(id) ON DELETE CASCADE,
                CONSTRAINT fk_template_tasks_depends_on FOREIGN KEY (depends_on_task_id) REFERENCES template_tasks(id),
                CONSTRAINT fk_template_tasks_created_by FOREIGN KEY (created_by) REFERENCES users(id),
                CONSTRAINT fk_template_tasks_updated_by FOREIGN KEY (updated_by) REFERENCES users(id)
              );

              CREATE INDEX idx_template_tasks_template_id ON template_tasks(template_id);
              CREATE INDEX idx_template_tasks_sequence ON template_tasks(sequence_order);
              CREATE INDEX idx_template_tasks_depends_on ON template_tasks(depends_on_task_id);
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_template_tasks_depends_on;
              DROP INDEX IF EXISTS idx_template_tasks_sequence;
              DROP INDEX IF EXISTS idx_template_tasks_template_id;
              DROP TABLE IF EXISTS template_tasks;

  # Changeset 008: Seed workflow templates and tasks data
  - changeSet:
      id: 008-seed-workflow-templates
      author: developer
      comment: "Insert sample onboarding workflow template with associated tasks for testing"
      changes:
        - sql:
            sql: |
              -- Insert sample onboarding workflow template
              INSERT INTO workflow_templates (id, template_name, workflow_type, description, default_status, created_at)
              VALUES (
                '550e8400-e29b-41d4-a716-446655440001',
                'Standard Employee Onboarding',
                'ONBOARDING',
                'Standard onboarding workflow for new employees including IT setup, HR documentation, and team introductions',
                'INITIATED',
                CURRENT_TIMESTAMP
              );

              -- Insert tasks for the onboarding template
              INSERT INTO template_tasks (id, template_id, task_name, description, sequence_order, depends_on_task_id, created_at)
              VALUES
                (
                  '550e8400-e29b-41d4-a716-446655440101',
                  '550e8400-e29b-41d4-a716-446655440001',
                  'Create user account',
                  'Create Active Directory user account and email address',
                  1,
                  NULL,
                  CURRENT_TIMESTAMP
                ),
                (
                  '550e8400-e29b-41d4-a716-446655440102',
                  '550e8400-e29b-41d4-a716-446655440001',
                  'Provision hardware',
                  'Order and configure laptop, monitor, keyboard, and mouse',
                  2,
                  '550e8400-e29b-41d4-a716-446655440101',
                  CURRENT_TIMESTAMP
                ),
                (
                  '550e8400-e29b-41d4-a716-446655440103',
                  '550e8400-e29b-41d4-a716-446655440001',
                  'Complete HR documentation',
                  'Employee to complete tax forms, benefits enrollment, and company policies acknowledgment',
                  3,
                  NULL,
                  CURRENT_TIMESTAMP
                ),
                (
                  '550e8400-e29b-41d4-a716-446655440104',
                  '550e8400-e29b-41d4-a716-446655440001',
                  'Schedule orientation meeting',
                  'Schedule and conduct orientation meeting with HR and line manager',
                  4,
                  '550e8400-e29b-41d4-a716-446655440103',
                  CURRENT_TIMESTAMP
                ),
                (
                  '550e8400-e29b-41d4-a716-446655440105',
                  '550e8400-e29b-41d4-a716-446655440001',
                  'Grant system access',
                  'Provide access to required applications and systems based on role',
                  5,
                  '550e8400-e29b-41d4-a716-446655440102',
                  CURRENT_TIMESTAMP
                );
      rollback:
        - sql:
            sql: |
              DELETE FROM template_tasks WHERE template_id = '550e8400-e29b-41d4-a716-446655440001';
              DELETE FROM workflow_templates WHERE id = '550e8400-e29b-41d4-a716-446655440001';

  # Changeset 009: Add missing fields to align with acceptance criteria
  - changeSet:
      id: 009-add-missing-fields-to-templates-and-tasks
      author: developer
      comment: "Add is_active field to workflow_templates and assigned_role, is_parallel fields to template_tasks to match Story 2.1 acceptance criteria"
      changes:
        - sql:
            sql: |
              -- Add is_active field to workflow_templates
              ALTER TABLE workflow_templates
              ADD COLUMN is_active BOOLEAN NOT NULL DEFAULT TRUE;

              -- Add assigned_role field to template_tasks (reuse existing user_role enum)
              ALTER TABLE template_tasks
              ADD COLUMN assigned_role user_role NOT NULL DEFAULT 'HR_ADMIN';

              -- Add is_parallel field to template_tasks
              ALTER TABLE template_tasks
              ADD COLUMN is_parallel BOOLEAN NOT NULL DEFAULT FALSE;

              -- Create index on assigned_role for filtering
              CREATE INDEX idx_template_tasks_assigned_role ON template_tasks(assigned_role);

              -- Update seed data with proper role assignments
              UPDATE template_tasks SET assigned_role = 'TECH_SUPPORT' WHERE id = '550e8400-e29b-41d4-a716-446655440101';
              UPDATE template_tasks SET assigned_role = 'TECH_SUPPORT' WHERE id = '550e8400-e29b-41d4-a716-446655440102';
              UPDATE template_tasks SET assigned_role = 'HR_ADMIN' WHERE id = '550e8400-e29b-41d4-a716-446655440103';
              UPDATE template_tasks SET assigned_role = 'HR_ADMIN', is_parallel = TRUE WHERE id = '550e8400-e29b-41d4-a716-446655440104';
              UPDATE template_tasks SET assigned_role = 'ADMINISTRATOR' WHERE id = '550e8400-e29b-41d4-a716-446655440105';
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_template_tasks_assigned_role;
              ALTER TABLE template_tasks DROP COLUMN IF EXISTS is_parallel;
              ALTER TABLE template_tasks DROP COLUMN IF EXISTS assigned_role;
              ALTER TABLE workflow_templates DROP COLUMN IF EXISTS is_active;

  # Story 3.1: Workflow Instance Data Model

  # Changeset 010: Create task_status ENUM type
  - changeSet:
      id: 3-1-1-create-task-status-enum
      author: james-developer
      comment: "Create PostgreSQL ENUM type for task instance status (NOT_STARTED, IN_PROGRESS, BLOCKED, COMPLETED)"
      changes:
        - sql:
            sql: |
              CREATE TYPE task_status AS ENUM (
                'NOT_STARTED',
                'IN_PROGRESS',
                'BLOCKED',
                'COMPLETED'
              );
      rollback:
        - sql:
            sql: DROP TYPE IF EXISTS task_status CASCADE;

  # Changeset 011: Create workflow_instances table
  - changeSet:
      id: 3-1-2-create-workflow-instances-table
      author: james-developer
      comment: "Create workflow_instances table for tracking employee onboarding/offboarding workflows"
      changes:
        - sql:
            sql: |
              CREATE TABLE workflow_instances (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                template_id UUID NOT NULL,
                employee_name VARCHAR(255) NOT NULL,
                employee_email VARCHAR(255) NOT NULL,
                employee_role VARCHAR(100) NOT NULL,
                workflow_type workflow_type NOT NULL,
                status workflow_status NOT NULL DEFAULT 'INITIATED',
                initiated_by UUID NOT NULL,
                initiated_at TIMESTAMP NOT NULL DEFAULT NOW(),
                completed_at TIMESTAMP NULL,
                custom_field_values JSONB NULL,
                created_at TIMESTAMP NOT NULL DEFAULT NOW(),
                updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
                CONSTRAINT fk_workflow_instances_template_id FOREIGN KEY (template_id) REFERENCES workflow_templates(id),
                CONSTRAINT fk_workflow_instances_initiated_by FOREIGN KEY (initiated_by) REFERENCES users(id)
              );
      rollback:
        - sql:
            sql: DROP TABLE IF EXISTS workflow_instances;

  # Changeset 012: Create indexes on workflow_instances table
  - changeSet:
      id: 3-1-3-create-workflow-instances-indexes
      author: james-developer
      comment: "Create indexes on workflow_instances for query optimization"
      changes:
        - sql:
            sql: |
              CREATE INDEX idx_workflow_instances_template_id ON workflow_instances(template_id);
              CREATE INDEX idx_workflow_instances_employee_email ON workflow_instances(employee_email);
              CREATE INDEX idx_workflow_instances_status ON workflow_instances(status);
              CREATE INDEX idx_workflow_instances_initiated_at ON workflow_instances(initiated_at);
              CREATE INDEX idx_workflow_instances_status_initiated_at ON workflow_instances(status, initiated_at);
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_workflow_instances_status_initiated_at;
              DROP INDEX IF EXISTS idx_workflow_instances_initiated_at;
              DROP INDEX IF EXISTS idx_workflow_instances_status;
              DROP INDEX IF EXISTS idx_workflow_instances_employee_email;
              DROP INDEX IF EXISTS idx_workflow_instances_template_id;

  # Changeset 013: Create task_instances table
  - changeSet:
      id: 3-1-4-create-task-instances-table
      author: james-developer
      comment: "Create task_instances table for tracking individual tasks within workflows"
      changes:
        - sql:
            sql: |
              CREATE TABLE task_instances (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                workflow_instance_id UUID NOT NULL,
                template_task_id UUID NOT NULL,
                task_name VARCHAR(255) NOT NULL,
                assigned_user_id UUID NULL,
                assigned_role user_role NOT NULL,
                status task_status NOT NULL DEFAULT 'NOT_STARTED',
                is_visible BOOLEAN NOT NULL DEFAULT TRUE,
                due_date TIMESTAMP NULL,
                completed_at TIMESTAMP NULL,
                completed_by UUID NULL,
                checklist_data JSONB NULL,
                created_at TIMESTAMP NOT NULL DEFAULT NOW(),
                updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
                CONSTRAINT fk_task_instances_workflow_instance_id FOREIGN KEY (workflow_instance_id) REFERENCES workflow_instances(id) ON DELETE CASCADE,
                CONSTRAINT fk_task_instances_template_task_id FOREIGN KEY (template_task_id) REFERENCES template_tasks(id),
                CONSTRAINT fk_task_instances_assigned_user_id FOREIGN KEY (assigned_user_id) REFERENCES users(id) ON DELETE SET NULL,
                CONSTRAINT fk_task_instances_completed_by FOREIGN KEY (completed_by) REFERENCES users(id) ON DELETE SET NULL
              );
      rollback:
        - sql:
            sql: DROP TABLE IF EXISTS task_instances;

  # Changeset 014: Create indexes on task_instances table
  - changeSet:
      id: 3-1-5-create-task-instances-indexes
      author: james-developer
      comment: "Create indexes on task_instances for query optimization"
      changes:
        - sql:
            sql: |
              CREATE INDEX idx_task_instances_workflow_instance_id ON task_instances(workflow_instance_id);
              CREATE INDEX idx_task_instances_assigned_user_id ON task_instances(assigned_user_id);
              CREATE INDEX idx_task_instances_status ON task_instances(status);
              CREATE INDEX idx_task_instances_due_date ON task_instances(due_date);
              CREATE INDEX idx_task_instances_assigned_user_status ON task_instances(assigned_user_id, status);
              CREATE INDEX idx_task_instances_workflow_status ON task_instances(workflow_instance_id, status);
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_task_instances_workflow_status;
              DROP INDEX IF EXISTS idx_task_instances_assigned_user_status;
              DROP INDEX IF EXISTS idx_task_instances_due_date;
              DROP INDEX IF EXISTS idx_task_instances_status;
              DROP INDEX IF EXISTS idx_task_instances_assigned_user_id;
              DROP INDEX IF EXISTS idx_task_instances_workflow_instance_id;

  # Changeset 015: Create workflow_state_history table
  - changeSet:
      id: 3-1-6-create-workflow-state-history-table
      author: james-developer
      comment: "Create workflow_state_history table for audit trail of workflow status changes"
      changes:
        - sql:
            sql: |
              CREATE TABLE workflow_state_history (
                id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
                workflow_instance_id UUID NOT NULL,
                previous_status workflow_status NOT NULL,
                new_status workflow_status NOT NULL,
                changed_by UUID NOT NULL,
                changed_at TIMESTAMP NOT NULL DEFAULT NOW(),
                notes TEXT NULL,
                CONSTRAINT fk_workflow_state_history_workflow_instance_id FOREIGN KEY (workflow_instance_id) REFERENCES workflow_instances(id) ON DELETE CASCADE,
                CONSTRAINT fk_workflow_state_history_changed_by FOREIGN KEY (changed_by) REFERENCES users(id)
              );
      rollback:
        - sql:
            sql: DROP TABLE IF EXISTS workflow_state_history;

  # Changeset 016: Create indexes on workflow_state_history table
  - changeSet:
      id: 3-1-7-create-workflow-state-history-indexes
      author: james-developer
      comment: "Create indexes on workflow_state_history for audit trail queries"
      changes:
        - sql:
            sql: |
              CREATE INDEX idx_workflow_state_history_workflow_instance_id ON workflow_state_history(workflow_instance_id);
              CREATE INDEX idx_workflow_state_history_changed_at ON workflow_state_history(changed_at);
              CREATE INDEX idx_workflow_state_history_workflow_changed_at ON workflow_state_history(workflow_instance_id, changed_at);
      rollback:
        - sql:
            sql: |
              DROP INDEX IF EXISTS idx_workflow_state_history_workflow_changed_at;
              DROP INDEX IF EXISTS idx_workflow_state_history_changed_at;
              DROP INDEX IF EXISTS idx_workflow_state_history_workflow_instance_id;
